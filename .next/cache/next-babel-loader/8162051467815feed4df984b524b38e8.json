{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/master/projects/aidaprint/lib/with-apollo-client.js\";\nimport React from 'react';\nimport initApollo from './init-apollo';\nimport Head from 'next/head';\nimport { getDataFromTree } from 'react-apollo';\nexport default (function (App) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inherits(Apollo, _React$Component);\n\n    _createClass(Apollo, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var Component, router, appProps, apollo, apolloState;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  Component = ctx.Component, router = ctx.router;\n                  appProps = {};\n\n                  if (!App.getInitialProps) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 5;\n                  return App.getInitialProps(ctx);\n\n                case 5:\n                  appProps = _context.sent;\n\n                case 6:\n                  // Run all GraphQL queries in the component tree\n                  // and extract the resulting data\n                  apollo = initApollo();\n\n                  if (!(typeof window === 'undefined')) {\n                    _context.next = 17;\n                    break;\n                  }\n\n                  _context.prev = 8;\n                  _context.next = 11;\n                  return getDataFromTree(React.createElement(App, _extends({}, appProps, {\n                    Component: Component,\n                    router: router,\n                    apolloClient: apollo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 24\n                    },\n                    __self: this\n                  })));\n\n                case 11:\n                  _context.next = 16;\n                  break;\n\n                case 13:\n                  _context.prev = 13;\n                  _context.t0 = _context[\"catch\"](8);\n                  // Prevent Apollo Client GraphQL errors from crashing SSR.\n                  // Handle them in components via the data.error prop:\n                  // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n                  console.error('Error while running `getDataFromTree`', _context.t0);\n\n                case 16:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind();\n\n                case 17:\n                  // Extract query data from the Apollo store\n                  apolloState = apollo.cache.extract();\n                  return _context.abrupt(\"return\", _objectSpread({}, appProps, {\n                    apolloState: apolloState\n                  }));\n\n                case 19:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[8, 13]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function Apollo(props) {\n      var _this;\n\n      _classCallCheck(this, Apollo);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Apollo).call(this, props));\n      _this.apolloClient = initApollo(props.apolloState);\n      return _this;\n    }\n\n    _createClass(Apollo, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(App, _extends({}, this.props, {\n          apolloClient: this.apolloClient,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return Apollo;\n  }(React.Component), _defineProperty(_class, \"displayName\", 'withApollo(App)'), _temp;\n});","map":{"version":3,"sources":["/home/master/projects/aidaprint/lib/with-apollo-client.js"],"names":["React","initApollo","Head","getDataFromTree","App","ctx","Component","router","appProps","getInitialProps","apollo","window","console","error","rewind","apolloState","cache","extract","props","apolloClient"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,eAAT,QAAgC,cAAhC;AAEA,gBAAe,UAAAC,GAAG,EAAI;AAAA;;AACpB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAEgCC,GAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAGYC,kBAAAA,SAHZ,GAGkCD,GAHlC,CAGYC,SAHZ,EAGuBC,MAHvB,GAGkCF,GAHlC,CAGuBE,MAHvB;AAKQC,kBAAAA,QALR,GAKmB,EALnB;;AAAA,uBAMQJ,GAAG,CAACK,eANZ;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAOuBL,GAAG,CAACK,eAAJ,CAAoBJ,GAApB,CAPvB;;AAAA;AAOMG,kBAAAA,QAPN;;AAAA;AAUI;AACA;AACME,kBAAAA,MAZV,GAYmBT,UAAU,EAZ7B;;AAAA,wBAaQ,OAAOU,MAAP,KAAkB,WAb1B;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,yBAgBcR,eAAe,CACnB,oBAAC,GAAD,eACMK,QADN;AAEE,oBAAA,SAAS,EAAEF,SAFb;AAGE,oBAAA,MAAM,EAAEC,MAHV;AAIE,oBAAA,YAAY,EAAEG,MAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADmB,CAhB7B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyBQ;AACA;AACA;AACAE,kBAAAA,OAAO,CAACC,KAAR,CAAc,uCAAd;;AA5BR;AA+BM;AACA;AACAX,kBAAAA,IAAI,CAACY,MAAL;;AAjCN;AAoCI;AACMC,kBAAAA,WArCV,GAqCwBL,MAAM,CAACM,KAAP,CAAaC,OAAb,EArCxB;AAAA,qEAwCST,QAxCT;AAyCMO,oBAAAA,WAAW,EAAXA;AAzCN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA6CE,oBAAaG,KAAb,EAAoB;AAAA;;AAAA;;AAClB,kFAAMA,KAAN;AACA,YAAKC,YAAL,GAAoBlB,UAAU,CAACiB,KAAK,CAACH,WAAP,CAA9B;AAFkB;AAGnB;;AAhDH;AAAA;AAAA,+BAkDY;AACR,eAAO,oBAAC,GAAD,eAAS,KAAKG,KAAd;AAAqB,UAAA,YAAY,EAAE,KAAKC,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;AApDH;;AAAA;AAAA,IAA4BnB,KAAK,CAACM,SAAlC,0CACuB,iBADvB;AAsDD,CAvDD","sourcesContent":["import React from 'react'\nimport initApollo from './init-apollo'\nimport Head from 'next/head'\nimport { getDataFromTree } from 'react-apollo'\n\nexport default App => {\n  return class Apollo extends React.Component {\n    static displayName = 'withApollo(App)'\n    static async getInitialProps (ctx) {\n      const { Component, router } = ctx\n\n      let appProps = {}\n      if (App.getInitialProps) {\n        appProps = await App.getInitialProps(ctx)\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const apollo = initApollo()\n      if (typeof window === 'undefined') {\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <App\n              {...appProps}\n              Component={Component}\n              router={router}\n              apolloClient={apollo}\n            />\n          )\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n          console.error('Error while running `getDataFromTree`', error)\n        }\n\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apollo.cache.extract()\n\n      return {\n        ...appProps,\n        apolloState\n      }\n    }\n\n    constructor (props) {\n      super(props)\n      this.apolloClient = initApollo(props.apolloState)\n    }\n\n    render () {\n      return <App {...this.props} apolloClient={this.apolloClient} />\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}